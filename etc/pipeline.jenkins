pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.jenkins"
            additionalBuildArgs '--build-arg UID=$(id -u) --build-arg GID=$(id -g)'
            args '--network=ci.network --volume $HOME/cache/composer:/home/jenkins/.composer/cache'
        }
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
        stage('Prepare') {
            steps {
                sh "mkdir -p build"
            }
        }

        stage('Install') {
            steps {
                sh "composer install --no-interaction"
            }
        }

        stage('Run Test') {
            steps {
                sh "./bin/phpunit"
                step([
                    $class: 'XUnitBuilder',
                    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
                    tools: [[$class: 'JUnitType', pattern: 'build/junit.xml']]
                ])
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/coverage', reportFiles: 'index.html', reportName: 'Coverage Report', reportTitles: ''])
            }
        }

        stage('Check Style') {
            steps {
                sh 'phpcs -q --report=checkstyle --report-file=build/checkstyle.xml --standard=PSR2 --extensions=php --ignore=vendor ./src || exit 0'
                checkstyle pattern: 'build/checkstyle.xml'
            }
        }

        stage('Copy Paste Detection') {
            steps {
                sh 'phpcpd -q --exclude=vendor --log-pmd build/pmd-cpd.xml ./src || exit 0'
                dry canRunOnFailed: true, pattern: 'build/pmd-cpd.xml'
            }
        }

        stage('Mess Detection') {
            steps {
                sh 'phpmd ./src xml phpmd.xml.dist --exclude vendor --reportfile build/pmd.xml || exit 0'
                pmd canRunOnFailed: true, pattern: 'build/pmd.xml'
            }
        }

        stage('Collect Metrics') {
            steps {
                sh "phpmetrics --quiet --excluded-dirs=vendor --report-html=build/metrics.html ./src"
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/', reportFiles: 'metrics.html', reportName: 'Metrics Report', reportTitles: ''])
            }
        }
    }


    post {
        always {
            cleanWs()

        }
    }

}
